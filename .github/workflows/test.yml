name: jami-store-requests-manager
run-name: New Upload request from ${{ github.actor }}
on:
  issue_comment:
    types: [created, edited]
jobs:
  set-up:
    if: contains(github.event.issue.labels.*.name, 'new upload request') && startsWith(github.event.comment.body, '/upload')
    runs-on:  ubuntu-latest
    outputs:
      attachements: ${{ steps.verify_attached_plugin.outputs.result }}
      repo: ${{ steps.repo.outputs.result }}
      fileName: ${{ steps.request.outputs.result }}
    steps:
      - name: verify the plugin file is attached
        id: verify_attached_plugin
        uses: actions/github-script@v6
        with:
          script: |
            const regex = /https?:\/\/.*\/.*\.jpl/;
            const comment = ${{ toJSON(github.event.comment) }};
            const attachements = comment.body.match(regex);
            console.log(attachements);
            return attachements;
      - name: get-request-file-name
        id: request
        uses: actions/github-script@v6
        with:
          script: |
            const request = "${{ fromJSON(steps.verify_attached_plugin.outputs.result)[0] }}"
            const extensionIndex = request.split("/").at(-1).lastIndexOf(".");
            fileName = request.substring(0, extensionIndex);
            return fileName;
      - name: get-repo-base-name
        id: repo
        uses: actions/github-script@v6
        with:
          script: |
            const repo = "${{ github.repository }}"
            baseName = repo.split("/").at(-1);
            return baseName;
  print-attachement:
    runs-on:  ubuntu-latest
    needs: [set-up]
    steps:
      - name: print
        run: echo ${{ toJSON(needs.set-up.outputs.attachements)[0] }}
  handle-bad-plugin-file:
    runs-on:  ubuntu-latest
    permissions:
      issues: write
    needs: [set-up]
    if: needs.set-up.outputs.attachements == 'null'
    steps:
      - name: ask to upload the plugin file
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              body: "@${{ github.actor }} Please upload your plugin to your comment and verify that your file is a gz."
            })
  verify-certificate:
    if: needs.set-up.outputs.attachements != 'null'
    runs-on:  ubuntu-latest
    permissions:
      issues: write
    needs: [set-up]
    steps:
      - name: comment-verification-in-progress
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              body: "the plugin file uploaded, verification in progress"
            })
      - name: add label to process the request
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              labels: ['plugin certificate verification in progress']
            })
      - name: request verify the plugin certificate
        id: request-verify-plugin-certificate
        run: |
          cd ${{ github.workspace }}
          git clone "https://review.jami.net/jami-plugins"
          # This should be remove on production
          git fetch https://review.jami.net/jami-plugins refs/changes/63/25763/10 && git checkout FETCH_HEAD
          cd ${{ github.workspace }}/jami-plugins/SDK
          pip3 install -r requirements.txt && pip3 install -r certificate_requirements.txt
          echo ${{ fromJSON(needs.set-up.outputs.attachements)[0] }}
          curl -o /tmp/plugin.jpl -L ${{ fromJSON(needs.set-up.outputs.attachements)[0] }}
          verification=$(python3 ./certKey.py --plugin verify --path /tmp/plugin.jpl 2>&1)
          echo "verification=${verification}" >> $GITHUB_OUTPUT
      - name: handle error
        if: endsWith(steps.request-verify-plugin-certificate.outputs.verification, 'OK') == false || failure()
        id: request-verify-certificate-error
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              body: 'the plugin is invalid, Please retry'
            })
            github.rest.issues.addLabels({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              labels: ['invalid plugin certificate']
            })
      - name: handle success when requesting verify the certificate
        if: endsWith(steps.request-verify-plugin-certificate.outputs.verification, 'OK')
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              body: '${{ github.actor}}, your plugin certificate is valid. Please wait to verify the signature.'
            })
            github.rest.issues.addLabels({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              labels: ['valid plugin certificate']
            })
            github.rest.issues.removeLabel({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              name: ['invalid plugin certificate']
            })
            github.rest.issues.removeLabel({
              issue_number: ${{ github.event.issue.number }},
              owner: "${{ github.repository_owner}}",
              repo: ${{ needs.set-up.outputs.repo }},
              name: ['plugin certificate verification in progress']
            })
